=================================
Map Relational Schemas to MongoDB
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Business intelligence tools connect to a data source and, given a fixed
tabular schema, allow users to visually explore their data.
MongoDB uses a :manual:`flexible schema </data-modeling>`, so some
business intelligence tools cannot use MongoDB as a native data source.

To use MongoDB with a relational business intelligence tool such as
:doc:`Tableau </connect/tableau>`, you must define a relational
mapping for your MongoDB data. |bi| provides several methods for
creating and managing a relational schema.

|bi-short|'s proxy server, :binary:`~bin.mongosqld`, has startup options
which determine how it handles schema management. These are covered in
detail in the :binary:`~bin.mongosqld` usage documentation.

.. _bi-cached-sampling:

Cached Sampling
---------------

*New in version 2.3:*

When :binary:`~bin.mongosqld` starts up, it can sample documents on
a MongoDB instance to generate a relational representation of the
schema, which it caches in memory. This is the default mode, which
:binary:`~bin.mongosqld` uses unless you specify a schema file with
the :option:`--schema <mongosqld --schema>` option or a schema
database with the
:option:`--sampleSource <mongosqld --sampleSource>` option.

You can configure :binary:`~bin.mongosqld` to automatically resample on a
fixed schedule with the :option:`--sampleRefreshIntervalSecs
<mongosqld --sampleRefreshIntervalSecs>`
option. If you do not specify a resampling interval,
:binary:`~bin.mongosqld` uses its initial schema for as long as the
process runs.

If you need to manually edit your schema to ensure correct
representation of your data, you can use a
:ref:`schema file <schema-with-drdl-file>` instead.

User Permissions
~~~~~~~~~~~~~~~~

To run |bi-short| in cached sampling mode, a MongoDB user needs
permission to create a schema from any database in the deployment. Give
this user the :authrole:`readAnyDatabase` role.

.. example::

   Use the MongoDB shell to add a user to the ``admin`` database with
   the proper permissions to read any database and read and write the
   schema database.

   .. code-block:: javascript
      :class: copyable
 
      db.getSiblingDB("admin").createUser(
        {
          user: "<username>",
          pwd: "<password>",
          roles: ["readAnyDatabase"]
        }
      )

.. seealso::

   - :option:`--auth <mongosqld --auth>`
   - :manual:`Enable Authentication </tutorial/enable-authentication>`

.. _resample-schema-data:

Resample Schema Data with ``FLUSH SAMPLE``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the :binary:`~bin.mongosqld` process starts it creates a
:doc:`schema </schema-configuration>`, either from a
:ref:`schema file <msqld-schema-options>` or by sampling data from a
MongoDB instance. If the data in your MongoDB instance changes shape
significantly with new fields or collections, you may wish to
regenerate the schema |bi-short| uses. You can regenerate
the schema either by restarting :binary:`~bin.mongosqld` or by issuing
the ``FLUSH SAMPLE`` command from within the
:ref:`MySQL shell <connect-with-mysql>`.

The :option:`--sampleRefreshIntervalSecs
<mongosqld --sampleRefreshIntervalSecs>` option provides another way
for :binary:`~bin.mongosqld` to regenerate the schema by resampling data
at a user-specified interval.

.. note::

   You cannot use the ``FLUSH SAMPLE`` command if :binary:`~bin.mongosqld`
   starts with a :ref:`schema file <schema-with-drdl-file>`
   via the :option:`--schema <mongosqld --schema>` option.

.. seealso::

   :option:`--sampleNamespaces <mongosqld --sampleNamespaces>`

   :option:`--sampleSource <mongosqld --sampleSource>`

   :option:`--sampleMode <mongosqld --sampleMode>`

.. _bi-persistent-schema:

Persist a Schema in MongoDB
---------------------------

The :option:`--sampleSource <mongosqld --sampleSource>`
option directs :binary:`~bin.mongosqld` to
use a particular database for schema storage. :binary:`~bin.mongosqld`
can either create a new database to use for schema storage or use
an existing database.

If you specify an existing database which has been used previously
for schema storage, the :option:`--sampleMode 
<mongosqld --sampleMode>` option determines
whether :binary:`~bin.mongosqld` writes new schema data to the specified
database or only reads from it. If you specify a database which
doesn't currently exist, you must set :option:`--sampleMode
<mongosqld --sampleMode>` to
``write``.

The :option:`--sampleRefreshIntervalSecs
<mongosqld --sampleRefreshIntervalSecs>`
option determines how frequently :binary:`~bin.mongosqld` resamples data
to update the schema.

.. include:: /includes/fact-resample-schema-data.rst

User Permissions
~~~~~~~~~~~~~~~~

To run |bi-short| in persisted schema mode, a MongoDB user needs
permission to create a schema from any database in the deployment and
read and write entries into the schema database. Give this user the
:authrole:`readAnyDatabase` role and the :authrole:`readWrite` role on
the database that stores the schema (set using :option:`--sampleMode
<mongosqld --sampleMode>`)

.. example::

   Use the MongoDB shell to add a user to the ``admin`` database with the proper
   permissions to read any database and read and write the schema
   database.

   .. code-block:: javascript
      :class: copyable
 
      db.getSiblingDB("admin").createUser(
        {
          user: "<username>",
          pwd: "<password>",
          roles: [
            "readAnyDatabase",
            { role: "readWrite", db: "<schemaDb>" }
          ]
        }
      )

.. seealso:: 

   - :option:`--auth <mongosqld --auth>`
   - :manual:`Enable Authentication </tutorial/enable-authentication>`

.. _schema-with-drdl-file:

Load a Schema from a DRDL File
------------------------------

The :option:`--schema <mongosqld --schema>` option allows you
to specify a schema file for :binary:`~bin.mongosqld` to use.

The schema generation tool :binary:`~bin.mongodrdl` outputs a schema file
in :ref:`Document Relational Definition Language <drdl>` (DRDL)
format, but you should verify that the schema it proposes matches your
data requirements. Examine both the table structure and field types
to ensure that you can generate your intended reports.

It is possible to manually edit the schema
definition files to perform the following actions:

- Add :ref:`aggregation pipeline <aggregation-pipeline>` stages
- Add fields that :binary:`~bin.mongodrdl` did not discover within
  the subset of documents that it sampled
- Remove fields
- Remove tables
- Rename tables, so long as the ``collection`` field remains the same
- Rename fields using the ``sqlname`` option

.. include:: /includes/fact-restart-mongosqld.rst
