=============
``mongodrdl``
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. only:: html

   .. meta::
      :description: The mongodrdl command man page.
      :keywords: mongodrdl, mongodb, man page

Description
-----------

.. only:: (not man)

   .. binary:: mongodrdl

.. include:: /includes/fact-bi-enterprise.rst

:program:`mongodrdl` produces a schema based on contents of one or more
:program:`mongod` :term:`collections <collection>` and writes them out into
``.drdl`` files understood by :program:`mongosqld`.

See :doc:`/schema-configuration` for details on this format.

.. include:: /includes/fact-restart-mongosqld.rst

Command Line Options
--------------------

Core Options
~~~~~~~~~~~~

.. program:: mongodrdl

.. include:: /includes/option/option-mongodrdl-help.rst

.. include:: /includes/option/option-mongodrdl-version.rst

.. include:: /includes/option/option-mongodrdl-verbose.rst

.. include:: /includes/option/option-mongodrdl-quiet.rst

.. include:: /includes/option/option-mongodrdl-host.rst

.. include:: /includes/option/option-mongodrdl-port.rst

.. include:: /includes/option/option-mongodrdl-db.rst

.. include:: /includes/option/option-mongodrdl-collection.rst

.. include:: /includes/option/option-mongodrdl-customFilterField.rst

.. include:: /includes/option/option-mongodrdl-out.rst

.. include:: /includes/option/option-mongodrdl-sampleSize.rst

.. include:: /includes/option/option-mongodrdl-uuidSubtype3Encoding.rst

.. include:: /includes/option/option-mongodrdl-preJoined.rst

Kerberos Options
~~~~~~~~~~~~~~~~

.. include:: /includes/option/option-mongodrdl-gssapiServiceName.rst

.. include:: /includes/option/option-mongodrdl-gssapiHostName.rst

TLS/SSL Options
~~~~~~~~~~~~~~~

.. include:: /includes/option/option-mongodrdl-ssl.rst

.. include:: /includes/option/option-mongodrdl-sslCAFile.rst

.. include:: /includes/option/option-mongodrdl-sslPEMKeyFile.rst

.. include:: /includes/option/option-mongodrdl-sslPEMKeyPassword.rst

.. include:: /includes/option/option-mongodrdl-sslCRLFile.rst

.. include:: /includes/option/option-mongodrdl-sslAllowInvalidCertificates.rst

.. include:: /includes/option/option-mongodrdl-sslAllowInvalidHostnames.rst

.. include:: /includes/option/option-mongodrdl-sslFIPSMode.rst

Authentication Options
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/option/option-mongodrdl-username.rst

.. include:: /includes/option/option-mongodrdl-password.rst

.. include:: /includes/option/option-mongodrdl-authenticationDatabase.rst

.. include:: /includes/option/option-mongodrdl-authenticationMechanism.rst

.. _mongodrdl-custom-filters:

Custom Filters
~~~~~~~~~~~~~~

You can add a special field to your schema to pass a custom
MongoDB :pipeline:`$match` query string to your MongoDB instance.

Use the ``--customFilterField`` option with :program:`mongodrdl` to name
a custom filter field. This field passes a native MongoDB
:pipeline:`$match` stage to use as the first stage of the aggregation
pipeline. The |bi| applies this stage before any additional stages
pushed down from SQL.

The query can refer to any field in the collection, even if the fields
were not exposed in the relational schema.

For an example, see :ref:`mongodrdl-custom-filters-example`.

Usage
-----

Generate a Schema
~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongodrdl-example.rst

.. _mongodrdl-custom-filters-example:

Custom Filter
~~~~~~~~~~~~~

To use this field, specify the ``--customFilterField`` flag with the name you
want this field to have:

.. code-block:: sh

   mongodrdl [ other options ] --customFilterField "_MONGOFILTER" -o schema.drdl

Your DRDL file ``schema.drdl`` will include the following field in every generated table:

.. code-block:: yaml

   - name: _MONGOFILTER
     mongotype: mongo.Filter
     sqltype: varchar

To add the special MongoDB query stage to your standard SQL, use the following
SQL syntax:

.. code-block:: sql

   SELECT <normal>
      FROM <tablename>
      WHERE <normal conditions> AND
          "_MONGOFILTER"='{ <json string that represents query to use> }'

   SELECT name,age
     FROM users
     WHERE active='t' AND
       "_MONGOFILTER"='{"addr":{"$elemMatch":{"city":"Springfield","state":"CA"}}}'

The |bi| will translate the above SQL into the following MongoDB
:ref:`aggregation <aggregation-framework>` expression:

.. code-block:: javascript

   db.users.aggregate([
      {$match:{"addr":{"$elemMatch":{"city":"Springfield","state":"CA"}}},
      {$match:{"active":true}},
      {$project:{"name":1, "age":1}}
   ]);

You can use this custom filter in any business intelligence tool by filtering
on your special field and providing the value to match as a single quoted string
representing valid :term:`JSON`. All quotes inside the JSON must be double
quotes.

.. seealso:: :ref:`bi-connector`
